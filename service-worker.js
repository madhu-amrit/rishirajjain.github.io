// This file is intentionally without code.
// It's present so that service worker registration will work when serving from the 'app' directory.
// The version of service-worker.js that's present in the 'dist' directory is automatically
// generated by the 'generate-service-worker' gulp task, and contains code to precache resources.


var filesToCache = [
  '.',
  'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700',
  'index.html',
  'templates/404.html',
  'templates/offline.html',
  'images/IMG_132004.jpg'

];
var statCacheName = 'pc-v4';



self.addEventListener('install',function (event)
{

  console.log('Attempting to install service worker and cache static assets');
  event.waitUntil(
    caches.open(statCacheName)
      .then(function(cache) {
        return cache.addAll(filesToCache);
      })
  );
});

self.addEventListener('fetch', function(event) {
  console.log('Fetch event for ', event.request.url);
  event.respondWith(
    caches.match(event.request).then(function(response) {
      if (response) {
        console.log('Found ', event.request.url, ' in cache');
        return response;
      }
      console.log('Network request for ', event.request.url);
      return fetch(event.request)
        .then(function(response) {

          //Respond with custom 404 page
          if (response.status === 404) {
            return caches.match('templates/404.html');
          }
          return caches.open(statCacheName).then(function(cache) {
            if (event.request.url.indexOf('test') < 0) {
              cache.put(event.request.url, response.clone());
            }
            return response;
          });
        });

    }).catch(function(error) {

      //Respond with custom offline page
      console.log('error', error);
      return caches.match('templates/offline.html');
    })
  );
});

self.addEventListener('activate', function(event) {
  console.log('Activating new service worker...');

  var cacheWhitelist = [statCacheName];

  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.map(function(cacheName) {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
